from modsim import *
import matplotlib
import matplotlib.animation as animation
#import matplotlib.collections.LineCollection as LineCollection
import platform
import sys
from pdb import set_trace

# Calculations

def planet_slope_func(planet, t, system):
	x, y, vx, vy = planet
	unpack(system)

	return vx, vy, 0, 0
	

def rocket_slope_func(rocket, t, system):
	x, y, vx, vy = rocket
	unpack(system)
	
	x_p = interpolate(results_p.x)(t)
	y_p = interpolate(results_p.y)(t)

	pos = Vector(x, y)
	pos_p = Vector(x_p, y_p)
	#pos_p2 = Vector(x_p2, y_p2)
	distance = pos.dist(pos_p).m

	if distance > rp:
		acc = - (G * mp / (distance**2)) * (pos-pos_p).hat()
	else:
		# hit planet surface
		vx = 0
		vy = 0
		acc = Vector(0,0)

	return vx, vy, acc.x.m, acc.y.m


'''planet = State(
	x=-1e10,
	y=0,
	vx=47e3,
	vy=0)

rocket = State(
	x=-0.65e10, 
	y=-1000e6, 
	vx = 12e3,
	vy = 12e3)'''

#duration = 11e5

def make_rocket_system(init_x_pos):
	init = State(x=init_x_pos, y=-1000e6, vx = 12e3, vy = 12e3)
	duration = 11e5

	return System(init=init,
	G=6.67408e-11, 
	ts=linspace(0,duration,1000),
	mr = 721.9,
	mp = 1.9e27,
	rp = 70e6)

x_pos_array = linspace(-0.8e10, -0.5e10, 11)

'''system = System(
	init=planet,
	G=6.67408e-11, 
	ts=linspace(0,duration,1000),
	mr = 721.9,
	mp = 1.9e27,
	rp = 70e6)


run_odeint(system, planet_slope_func)
results_p = system.results

system.init = rocket
system.results_p = results_p
		
run_odeint(system, rocket_slope_func)
results_r = system.results'''

def sweep_init_pos(x_pos_array):
	sweep = SweepSeries()
	for init_x in x_pos_array:
		rocket = State(x=init_x, y=-1000e6, vx = 12e3, vy = 12e3)
		planet = State(x=-1e10, y=0, vx=47e3, vy=0)

		duration = 11e5

		system = System(init=planet, G=6.67408e-11, ts=linspace(0,duration,1000), mr = 721.9, mp = 1.9e27, rp = 70e6)

		run_odeint(system, planet_slope_func)
		results_p = system.results

		system.init = rocket
		system.results_p = results_p
		
		run_odeint(system, rocket_slope_func)
		results_r = system.results	

		vx_r = results_r.vx
		vy_r = results_r.vy
		sweep[init_x] = v_r = np.sqrt(vx_r**2 + vy_r**2)
	return sweep

fig_v = plt.figure()

#vx_r = results_r.vx
#vy_r = results_r.vy
#v_r = np.sqrt(vx_r**2 + vy_r**2)

#plt.plot(v_r)

x_sweep = sweep_init_pos(x_pos_array)

plt.plot(x_sweep)
plt.title('Speed')

fig_v.savefig('build/2velocity.png')
